/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace DelegationManager {
  export type DelegationStruct = {
    amount: BigNumberish;
    unlockTime: BigNumberish;
    lockDuration: BigNumberish;
    validator: AddressLike;
  };

  export type DelegationStructOutput = [
    amount: bigint,
    unlockTime: bigint,
    lockDuration: bigint,
    validator: string
  ] & {
    amount: bigint;
    unlockTime: bigint;
    lockDuration: bigint;
    validator: string;
  };
}

export interface DelegationManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DELEGATION_FEE_BIPS"
      | "DYNAMIC_STAKE_BIPS"
      | "FORCE_UNSTAKE_PENALTY_BIPS"
      | "MAX_LOCK_DURATION"
      | "MAX_SUPPLY"
      | "MINT_POOL"
      | "MIN_LOCK_DURATION"
      | "ONTIME_UNSTAKE_FEE_BIPS"
      | "SAFETY_MARGIN_BIPS"
      | "TGE_SUPPLY"
      | "VALIDATOR_FEE_BIPS"
      | "VALIDATOR_LOCK_DURATION"
      | "accDelegatorRewardPerStake"
      | "accValidatorRewardPerStake"
      | "bkcToken"
      | "claimDelegatorReward"
      | "delegate"
      | "delegatorRewardDebt"
      | "depositRewards"
      | "forceUnstake"
      | "getAllValidators"
      | "getDelegationsOf"
      | "getMinValidatorStake"
      | "hasPaidRegistrationFee"
      | "owner"
      | "payRegistrationFee"
      | "pendingDelegatorRewards"
      | "registerValidator"
      | "renounceOwnership"
      | "rewardManagerAddress"
      | "setRewardManager"
      | "totalNetworkPStake"
      | "transferOwnership"
      | "treasuryWallet"
      | "unstake"
      | "userDelegations"
      | "userTotalPStake"
      | "validatorRewardDebt"
      | "validators"
      | "validatorsArray"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Delegated"
      | "DelegatorRewardClaimed"
      | "OwnershipTransferred"
      | "RewardsDeposited"
      | "Unstaked"
      | "ValidatorRegistered"
      | "ValidatorRewardClaimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DELEGATION_FEE_BIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DYNAMIC_STAKE_BIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FORCE_UNSTAKE_PENALTY_BIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_LOCK_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MINT_POOL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_LOCK_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONTIME_UNSTAKE_FEE_BIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAFETY_MARGIN_BIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TGE_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATOR_FEE_BIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATOR_LOCK_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accDelegatorRewardPerStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accValidatorRewardPerStake",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bkcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimDelegatorReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatorRewardDebt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositRewards",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceUnstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegationsOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinValidatorStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasPaidRegistrationFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payRegistrationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingDelegatorRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardManagerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalNetworkPStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userDelegations",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userTotalPStake",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorRewardDebt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorsArray",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DELEGATION_FEE_BIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DYNAMIC_STAKE_BIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FORCE_UNSTAKE_PENALTY_BIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_LOCK_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_SUPPLY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MINT_POOL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_LOCK_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONTIME_UNSTAKE_FEE_BIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAFETY_MARGIN_BIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TGE_SUPPLY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATOR_FEE_BIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATOR_LOCK_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accDelegatorRewardPerStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accValidatorRewardPerStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bkcToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimDelegatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegatorRewardDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegationsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinValidatorStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPaidRegistrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payRegistrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingDelegatorRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardManagerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalNetworkPStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userDelegations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTotalPStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorRewardDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validatorsArray",
    data: BytesLike
  ): Result;
}

export namespace DelegatedEvent {
  export type InputTuple = [
    user: AddressLike,
    validator: AddressLike,
    delegationIndex: BigNumberish,
    amount: BigNumberish,
    feePaid: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    validator: string,
    delegationIndex: bigint,
    amount: bigint,
    feePaid: bigint
  ];
  export interface OutputObject {
    user: string;
    validator: string;
    delegationIndex: bigint;
    amount: bigint;
    feePaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegatorRewardClaimedEvent {
  export type InputTuple = [delegator: AddressLike, amount: BigNumberish];
  export type OutputTuple = [delegator: string, amount: bigint];
  export interface OutputObject {
    delegator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsDepositedEvent {
  export type InputTuple = [
    from: AddressLike,
    validatorAmount: BigNumberish,
    delegatorAmount: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    validatorAmount: bigint,
    delegatorAmount: bigint
  ];
  export interface OutputObject {
    from: string;
    validatorAmount: bigint;
    delegatorAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakedEvent {
  export type InputTuple = [
    user: AddressLike,
    delegationIndex: BigNumberish,
    amount: BigNumberish,
    feePaid: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    delegationIndex: bigint,
    amount: bigint,
    feePaid: bigint
  ];
  export interface OutputObject {
    user: string;
    delegationIndex: bigint;
    amount: bigint;
    feePaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorRegisteredEvent {
  export type InputTuple = [validator: AddressLike, selfStake: BigNumberish];
  export type OutputTuple = [validator: string, selfStake: bigint];
  export interface OutputObject {
    validator: string;
    selfStake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorRewardClaimedEvent {
  export type InputTuple = [validator: AddressLike, amount: BigNumberish];
  export type OutputTuple = [validator: string, amount: bigint];
  export interface OutputObject {
    validator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DelegationManager extends BaseContract {
  connect(runner?: ContractRunner | null): DelegationManager;
  waitForDeployment(): Promise<this>;

  interface: DelegationManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DELEGATION_FEE_BIPS: TypedContractMethod<[], [bigint], "view">;

  DYNAMIC_STAKE_BIPS: TypedContractMethod<[], [bigint], "view">;

  FORCE_UNSTAKE_PENALTY_BIPS: TypedContractMethod<[], [bigint], "view">;

  MAX_LOCK_DURATION: TypedContractMethod<[], [bigint], "view">;

  MAX_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  MINT_POOL: TypedContractMethod<[], [bigint], "view">;

  MIN_LOCK_DURATION: TypedContractMethod<[], [bigint], "view">;

  ONTIME_UNSTAKE_FEE_BIPS: TypedContractMethod<[], [bigint], "view">;

  SAFETY_MARGIN_BIPS: TypedContractMethod<[], [bigint], "view">;

  TGE_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  VALIDATOR_FEE_BIPS: TypedContractMethod<[], [bigint], "view">;

  VALIDATOR_LOCK_DURATION: TypedContractMethod<[], [bigint], "view">;

  accDelegatorRewardPerStake: TypedContractMethod<[], [bigint], "view">;

  accValidatorRewardPerStake: TypedContractMethod<[], [bigint], "view">;

  bkcToken: TypedContractMethod<[], [string], "view">;

  claimDelegatorReward: TypedContractMethod<[], [void], "nonpayable">;

  delegate: TypedContractMethod<
    [
      _validatorAddress: AddressLike,
      _totalAmount: BigNumberish,
      _lockDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  delegatorRewardDebt: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  depositRewards: TypedContractMethod<
    [_validatorAmount: BigNumberish, _delegatorAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  forceUnstake: TypedContractMethod<
    [_delegationIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllValidators: TypedContractMethod<[], [string[]], "view">;

  getDelegationsOf: TypedContractMethod<
    [_user: AddressLike],
    [DelegationManager.DelegationStructOutput[]],
    "view"
  >;

  getMinValidatorStake: TypedContractMethod<[], [bigint], "view">;

  hasPaidRegistrationFee: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  payRegistrationFee: TypedContractMethod<[], [void], "nonpayable">;

  pendingDelegatorRewards: TypedContractMethod<
    [_user: AddressLike],
    [bigint],
    "view"
  >;

  registerValidator: TypedContractMethod<
    [_validatorAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardManagerAddress: TypedContractMethod<[], [string], "view">;

  setRewardManager: TypedContractMethod<
    [_manager: AddressLike],
    [void],
    "nonpayable"
  >;

  totalNetworkPStake: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasuryWallet: TypedContractMethod<[], [string], "view">;

  unstake: TypedContractMethod<
    [_delegationIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  userDelegations: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, string] & {
        amount: bigint;
        unlockTime: bigint;
        lockDuration: bigint;
        validator: string;
      }
    ],
    "view"
  >;

  userTotalPStake: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  validatorRewardDebt: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  validators: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        isRegistered: boolean;
        selfStakeAmount: bigint;
        selfStakeUnlockTime: bigint;
        totalPStake: bigint;
        totalDelegatedAmount: bigint;
      }
    ],
    "view"
  >;

  validatorsArray: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DELEGATION_FEE_BIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DYNAMIC_STAKE_BIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FORCE_UNSTAKE_PENALTY_BIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_LOCK_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MINT_POOL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_LOCK_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ONTIME_UNSTAKE_FEE_BIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SAFETY_MARGIN_BIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TGE_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VALIDATOR_FEE_BIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VALIDATOR_LOCK_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "accDelegatorRewardPerStake"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "accValidatorRewardPerStake"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bkcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimDelegatorReward"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<
    [
      _validatorAddress: AddressLike,
      _totalAmount: BigNumberish,
      _lockDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegatorRewardDebt"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositRewards"
  ): TypedContractMethod<
    [_validatorAmount: BigNumberish, _delegatorAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "forceUnstake"
  ): TypedContractMethod<
    [_delegationIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllValidators"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getDelegationsOf"
  ): TypedContractMethod<
    [_user: AddressLike],
    [DelegationManager.DelegationStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMinValidatorStake"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasPaidRegistrationFee"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payRegistrationFee"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pendingDelegatorRewards"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerValidator"
  ): TypedContractMethod<
    [_validatorAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardManagerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setRewardManager"
  ): TypedContractMethod<[_manager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalNetworkPStake"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasuryWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<
    [_delegationIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userDelegations"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, string] & {
        amount: bigint;
        unlockTime: bigint;
        lockDuration: bigint;
        validator: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userTotalPStake"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "validatorRewardDebt"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "validators"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        isRegistered: boolean;
        selfStakeAmount: bigint;
        selfStakeUnlockTime: bigint;
        totalPStake: bigint;
        totalDelegatedAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "validatorsArray"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "Delegated"
  ): TypedContractEvent<
    DelegatedEvent.InputTuple,
    DelegatedEvent.OutputTuple,
    DelegatedEvent.OutputObject
  >;
  getEvent(
    key: "DelegatorRewardClaimed"
  ): TypedContractEvent<
    DelegatorRewardClaimedEvent.InputTuple,
    DelegatorRewardClaimedEvent.OutputTuple,
    DelegatorRewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RewardsDeposited"
  ): TypedContractEvent<
    RewardsDepositedEvent.InputTuple,
    RewardsDepositedEvent.OutputTuple,
    RewardsDepositedEvent.OutputObject
  >;
  getEvent(
    key: "Unstaked"
  ): TypedContractEvent<
    UnstakedEvent.InputTuple,
    UnstakedEvent.OutputTuple,
    UnstakedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorRegistered"
  ): TypedContractEvent<
    ValidatorRegisteredEvent.InputTuple,
    ValidatorRegisteredEvent.OutputTuple,
    ValidatorRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorRewardClaimed"
  ): TypedContractEvent<
    ValidatorRewardClaimedEvent.InputTuple,
    ValidatorRewardClaimedEvent.OutputTuple,
    ValidatorRewardClaimedEvent.OutputObject
  >;

  filters: {
    "Delegated(address,address,uint256,uint256,uint256)": TypedContractEvent<
      DelegatedEvent.InputTuple,
      DelegatedEvent.OutputTuple,
      DelegatedEvent.OutputObject
    >;
    Delegated: TypedContractEvent<
      DelegatedEvent.InputTuple,
      DelegatedEvent.OutputTuple,
      DelegatedEvent.OutputObject
    >;

    "DelegatorRewardClaimed(address,uint256)": TypedContractEvent<
      DelegatorRewardClaimedEvent.InputTuple,
      DelegatorRewardClaimedEvent.OutputTuple,
      DelegatorRewardClaimedEvent.OutputObject
    >;
    DelegatorRewardClaimed: TypedContractEvent<
      DelegatorRewardClaimedEvent.InputTuple,
      DelegatorRewardClaimedEvent.OutputTuple,
      DelegatorRewardClaimedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RewardsDeposited(address,uint256,uint256)": TypedContractEvent<
      RewardsDepositedEvent.InputTuple,
      RewardsDepositedEvent.OutputTuple,
      RewardsDepositedEvent.OutputObject
    >;
    RewardsDeposited: TypedContractEvent<
      RewardsDepositedEvent.InputTuple,
      RewardsDepositedEvent.OutputTuple,
      RewardsDepositedEvent.OutputObject
    >;

    "Unstaked(address,uint256,uint256,uint256)": TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;
    Unstaked: TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;

    "ValidatorRegistered(address,uint256)": TypedContractEvent<
      ValidatorRegisteredEvent.InputTuple,
      ValidatorRegisteredEvent.OutputTuple,
      ValidatorRegisteredEvent.OutputObject
    >;
    ValidatorRegistered: TypedContractEvent<
      ValidatorRegisteredEvent.InputTuple,
      ValidatorRegisteredEvent.OutputTuple,
      ValidatorRegisteredEvent.OutputObject
    >;

    "ValidatorRewardClaimed(address,uint256)": TypedContractEvent<
      ValidatorRewardClaimedEvent.InputTuple,
      ValidatorRewardClaimedEvent.OutputTuple,
      ValidatorRewardClaimedEvent.OutputObject
    >;
    ValidatorRewardClaimed: TypedContractEvent<
      ValidatorRewardClaimedEvent.InputTuple,
      ValidatorRewardClaimedEvent.OutputTuple,
      ValidatorRewardClaimedEvent.OutputObject
    >;
  };
}
