/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface NFTLiquidityPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_SPLIT_DIVISOR"
      | "SELL_FEE_BIPS"
      | "addInitialLiquidity"
      | "addMoreNFTsToPool"
      | "bkcToken"
      | "buyNFT"
      | "createPool"
      | "delegationManager"
      | "getBuyPrice"
      | "getSellPrice"
      | "onERC721Received"
      | "owner"
      | "pools"
      | "renounceOwnership"
      | "rewardBoosterNFT"
      | "sellNFT"
      | "transferOwnership"
      | "treasuryWallet"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LiquidityAdded"
      | "NFTBought"
      | "NFTSold"
      | "NFTsAddedToPool"
      | "OwnershipTransferred"
      | "PoolCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FEE_SPLIT_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SELL_FEE_BIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addInitialLiquidity",
    values: [BigNumberish, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addMoreNFTsToPool",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "bkcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyNFT",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegationManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardBoosterNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryWallet",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_SPLIT_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SELL_FEE_BIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addInitialLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMoreNFTsToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bkcToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardBoosterNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryWallet",
    data: BytesLike
  ): Result;
}

export namespace LiquidityAddedEvent {
  export type InputTuple = [
    boostBips: BigNumberish,
    nftAmount: BigNumberish,
    bkcAmount: BigNumberish
  ];
  export type OutputTuple = [
    boostBips: bigint,
    nftAmount: bigint,
    bkcAmount: bigint
  ];
  export interface OutputObject {
    boostBips: bigint;
    nftAmount: bigint;
    bkcAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTBoughtEvent {
  export type InputTuple = [
    buyer: AddressLike,
    boostBips: BigNumberish,
    tokenId: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    boostBips: bigint,
    tokenId: bigint,
    price: bigint
  ];
  export interface OutputObject {
    buyer: string;
    boostBips: bigint;
    tokenId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTSoldEvent {
  export type InputTuple = [
    seller: AddressLike,
    boostBips: BigNumberish,
    tokenId: BigNumberish,
    payout: BigNumberish,
    feePaid: BigNumberish
  ];
  export type OutputTuple = [
    seller: string,
    boostBips: bigint,
    tokenId: bigint,
    payout: bigint,
    feePaid: bigint
  ];
  export interface OutputObject {
    seller: string;
    boostBips: bigint;
    tokenId: bigint;
    payout: bigint;
    feePaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTsAddedToPoolEvent {
  export type InputTuple = [boostBips: BigNumberish, nftAmount: BigNumberish];
  export type OutputTuple = [boostBips: bigint, nftAmount: bigint];
  export interface OutputObject {
    boostBips: bigint;
    nftAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolCreatedEvent {
  export type InputTuple = [boostBips: BigNumberish];
  export type OutputTuple = [boostBips: bigint];
  export interface OutputObject {
    boostBips: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NFTLiquidityPool extends BaseContract {
  connect(runner?: ContractRunner | null): NFTLiquidityPool;
  waitForDeployment(): Promise<this>;

  interface: NFTLiquidityPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_SPLIT_DIVISOR: TypedContractMethod<[], [bigint], "view">;

  SELL_FEE_BIPS: TypedContractMethod<[], [bigint], "view">;

  addInitialLiquidity: TypedContractMethod<
    [
      _boostBips: BigNumberish,
      _tokenIds: BigNumberish[],
      _bkcAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  addMoreNFTsToPool: TypedContractMethod<
    [_boostBips: BigNumberish, _tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  bkcToken: TypedContractMethod<[], [string], "view">;

  buyNFT: TypedContractMethod<
    [_boostBips: BigNumberish, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createPool: TypedContractMethod<
    [_boostBips: BigNumberish],
    [void],
    "nonpayable"
  >;

  delegationManager: TypedContractMethod<[], [string], "view">;

  getBuyPrice: TypedContractMethod<
    [_boostBips: BigNumberish],
    [bigint],
    "view"
  >;

  getSellPrice: TypedContractMethod<
    [_boostBips: BigNumberish],
    [bigint],
    "view"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pools: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        tokenBalance: bigint;
        nftCount: bigint;
        k: bigint;
        isInitialized: boolean;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardBoosterNFT: TypedContractMethod<[], [string], "view">;

  sellNFT: TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasuryWallet: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_SPLIT_DIVISOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SELL_FEE_BIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addInitialLiquidity"
  ): TypedContractMethod<
    [
      _boostBips: BigNumberish,
      _tokenIds: BigNumberish[],
      _bkcAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addMoreNFTsToPool"
  ): TypedContractMethod<
    [_boostBips: BigNumberish, _tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bkcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyNFT"
  ): TypedContractMethod<
    [_boostBips: BigNumberish, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createPool"
  ): TypedContractMethod<[_boostBips: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegationManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBuyPrice"
  ): TypedContractMethod<[_boostBips: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSellPrice"
  ): TypedContractMethod<[_boostBips: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pools"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        tokenBalance: bigint;
        nftCount: bigint;
        k: bigint;
        isInitialized: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardBoosterNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sellNFT"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasuryWallet"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "LiquidityAdded"
  ): TypedContractEvent<
    LiquidityAddedEvent.InputTuple,
    LiquidityAddedEvent.OutputTuple,
    LiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "NFTBought"
  ): TypedContractEvent<
    NFTBoughtEvent.InputTuple,
    NFTBoughtEvent.OutputTuple,
    NFTBoughtEvent.OutputObject
  >;
  getEvent(
    key: "NFTSold"
  ): TypedContractEvent<
    NFTSoldEvent.InputTuple,
    NFTSoldEvent.OutputTuple,
    NFTSoldEvent.OutputObject
  >;
  getEvent(
    key: "NFTsAddedToPool"
  ): TypedContractEvent<
    NFTsAddedToPoolEvent.InputTuple,
    NFTsAddedToPoolEvent.OutputTuple,
    NFTsAddedToPoolEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PoolCreated"
  ): TypedContractEvent<
    PoolCreatedEvent.InputTuple,
    PoolCreatedEvent.OutputTuple,
    PoolCreatedEvent.OutputObject
  >;

  filters: {
    "LiquidityAdded(uint256,uint256,uint256)": TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;
    LiquidityAdded: TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;

    "NFTBought(address,uint256,uint256,uint256)": TypedContractEvent<
      NFTBoughtEvent.InputTuple,
      NFTBoughtEvent.OutputTuple,
      NFTBoughtEvent.OutputObject
    >;
    NFTBought: TypedContractEvent<
      NFTBoughtEvent.InputTuple,
      NFTBoughtEvent.OutputTuple,
      NFTBoughtEvent.OutputObject
    >;

    "NFTSold(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      NFTSoldEvent.InputTuple,
      NFTSoldEvent.OutputTuple,
      NFTSoldEvent.OutputObject
    >;
    NFTSold: TypedContractEvent<
      NFTSoldEvent.InputTuple,
      NFTSoldEvent.OutputTuple,
      NFTSoldEvent.OutputObject
    >;

    "NFTsAddedToPool(uint256,uint256)": TypedContractEvent<
      NFTsAddedToPoolEvent.InputTuple,
      NFTsAddedToPoolEvent.OutputTuple,
      NFTsAddedToPoolEvent.OutputObject
    >;
    NFTsAddedToPool: TypedContractEvent<
      NFTsAddedToPoolEvent.InputTuple,
      NFTsAddedToPoolEvent.OutputTuple,
      NFTsAddedToPoolEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PoolCreated(uint256)": TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
    PoolCreated: TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
  };
}
