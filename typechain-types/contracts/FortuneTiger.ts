/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FortuneTigerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BENEFICENT_CAUSE_BIPS"
      | "BENEFICENT_CREATOR_BIPS"
      | "BENEFICENT_DELEGATOR_BIPS"
      | "BENEFICENT_TREASURY_BIPS"
      | "COUPONS_PER_BKC"
      | "DRAW_MAX_OFFSET_BLOCKS"
      | "SPORT_CREATOR_BIPS"
      | "SPORT_DELEGATOR_BIPS"
      | "SPORT_TREASURY_BIPS"
      | "SPORT_WINNER_BIPS"
      | "actionCounter"
      | "actions"
      | "bkcToken"
      | "couponOwners"
      | "couponRanges"
      | "createAction"
      | "delegationManager"
      | "finalizeAction"
      | "getMinCreatorStake"
      | "owner"
      | "participate"
      | "renounceOwnership"
      | "transferOwnership"
      | "treasuryWallet"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActionCreated"
      | "ActionFinalized"
      | "OwnershipTransferred"
      | "Participation"
      | "StakeReturned"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BENEFICENT_CAUSE_BIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BENEFICENT_CREATOR_BIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BENEFICENT_DELEGATOR_BIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BENEFICENT_TREASURY_BIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COUPONS_PER_BKC",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DRAW_MAX_OFFSET_BLOCKS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SPORT_CREATOR_BIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SPORT_DELEGATOR_BIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SPORT_TREASURY_BIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SPORT_WINNER_BIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "actionCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "actions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bkcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "couponOwners",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "couponRanges",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAction",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegationManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeAction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinCreatorStake",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "participate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryWallet",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BENEFICENT_CAUSE_BIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BENEFICENT_CREATOR_BIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BENEFICENT_DELEGATOR_BIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BENEFICENT_TREASURY_BIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COUPONS_PER_BKC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DRAW_MAX_OFFSET_BLOCKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SPORT_CREATOR_BIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SPORT_DELEGATOR_BIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SPORT_TREASURY_BIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SPORT_WINNER_BIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "actionCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "actions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bkcToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "couponOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "couponRanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinCreatorStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryWallet",
    data: BytesLike
  ): Result;
}

export namespace ActionCreatedEvent {
  export type InputTuple = [
    actionId: BigNumberish,
    creator: AddressLike,
    actionType: BigNumberish,
    endTime: BigNumberish,
    description: string
  ];
  export type OutputTuple = [
    actionId: bigint,
    creator: string,
    actionType: bigint,
    endTime: bigint,
    description: string
  ];
  export interface OutputObject {
    actionId: bigint;
    creator: string;
    actionType: bigint;
    endTime: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ActionFinalizedEvent {
  export type InputTuple = [
    actionId: BigNumberish,
    finalRecipient: AddressLike,
    prizeAmount: BigNumberish
  ];
  export type OutputTuple = [
    actionId: bigint,
    finalRecipient: string,
    prizeAmount: bigint
  ];
  export interface OutputObject {
    actionId: bigint;
    finalRecipient: string;
    prizeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParticipationEvent {
  export type InputTuple = [
    actionId: BigNumberish,
    participant: AddressLike,
    bkcAmount: BigNumberish,
    couponsIssued: BigNumberish
  ];
  export type OutputTuple = [
    actionId: bigint,
    participant: string,
    bkcAmount: bigint,
    couponsIssued: bigint
  ];
  export interface OutputObject {
    actionId: bigint;
    participant: string;
    bkcAmount: bigint;
    couponsIssued: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeReturnedEvent {
  export type InputTuple = [
    actionId: BigNumberish,
    creator: AddressLike,
    stakeAmount: BigNumberish
  ];
  export type OutputTuple = [
    actionId: bigint,
    creator: string,
    stakeAmount: bigint
  ];
  export interface OutputObject {
    actionId: bigint;
    creator: string;
    stakeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FortuneTiger extends BaseContract {
  connect(runner?: ContractRunner | null): FortuneTiger;
  waitForDeployment(): Promise<this>;

  interface: FortuneTigerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BENEFICENT_CAUSE_BIPS: TypedContractMethod<[], [bigint], "view">;

  BENEFICENT_CREATOR_BIPS: TypedContractMethod<[], [bigint], "view">;

  BENEFICENT_DELEGATOR_BIPS: TypedContractMethod<[], [bigint], "view">;

  BENEFICENT_TREASURY_BIPS: TypedContractMethod<[], [bigint], "view">;

  COUPONS_PER_BKC: TypedContractMethod<[], [bigint], "view">;

  DRAW_MAX_OFFSET_BLOCKS: TypedContractMethod<[], [bigint], "view">;

  SPORT_CREATOR_BIPS: TypedContractMethod<[], [bigint], "view">;

  SPORT_DELEGATOR_BIPS: TypedContractMethod<[], [bigint], "view">;

  SPORT_TREASURY_BIPS: TypedContractMethod<[], [bigint], "view">;

  SPORT_WINNER_BIPS: TypedContractMethod<[], [bigint], "view">;

  actionCounter: TypedContractMethod<[], [bigint], "view">;

  actions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        string,
        bigint,
        bigint
      ] & {
        id: bigint;
        creator: string;
        description: string;
        actionType: bigint;
        status: bigint;
        endTime: bigint;
        totalPot: bigint;
        creatorStake: bigint;
        isStakeReturned: boolean;
        beneficiary: string;
        totalCoupons: bigint;
        winner: string;
        closingBlock: bigint;
        winningCoupon: bigint;
      }
    ],
    "view"
  >;

  bkcToken: TypedContractMethod<[], [string], "view">;

  couponOwners: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  couponRanges: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  createAction: TypedContractMethod<
    [
      _duration: BigNumberish,
      _actionType: BigNumberish,
      _charityStake: BigNumberish,
      _description: string
    ],
    [void],
    "nonpayable"
  >;

  delegationManager: TypedContractMethod<[], [string], "view">;

  finalizeAction: TypedContractMethod<
    [_actionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getMinCreatorStake: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  participate: TypedContractMethod<
    [_actionId: BigNumberish, _bkcAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasuryWallet: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BENEFICENT_CAUSE_BIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BENEFICENT_CREATOR_BIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BENEFICENT_DELEGATOR_BIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BENEFICENT_TREASURY_BIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "COUPONS_PER_BKC"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DRAW_MAX_OFFSET_BLOCKS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SPORT_CREATOR_BIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SPORT_DELEGATOR_BIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SPORT_TREASURY_BIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SPORT_WINNER_BIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "actionCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "actions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        string,
        bigint,
        bigint
      ] & {
        id: bigint;
        creator: string;
        description: string;
        actionType: bigint;
        status: bigint;
        endTime: bigint;
        totalPot: bigint;
        creatorStake: bigint;
        isStakeReturned: boolean;
        beneficiary: string;
        totalCoupons: bigint;
        winner: string;
        closingBlock: bigint;
        winningCoupon: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "bkcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "couponOwners"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "couponRanges"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "createAction"
  ): TypedContractMethod<
    [
      _duration: BigNumberish,
      _actionType: BigNumberish,
      _charityStake: BigNumberish,
      _description: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegationManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "finalizeAction"
  ): TypedContractMethod<[_actionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getMinCreatorStake"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "participate"
  ): TypedContractMethod<
    [_actionId: BigNumberish, _bkcAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasuryWallet"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ActionCreated"
  ): TypedContractEvent<
    ActionCreatedEvent.InputTuple,
    ActionCreatedEvent.OutputTuple,
    ActionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ActionFinalized"
  ): TypedContractEvent<
    ActionFinalizedEvent.InputTuple,
    ActionFinalizedEvent.OutputTuple,
    ActionFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Participation"
  ): TypedContractEvent<
    ParticipationEvent.InputTuple,
    ParticipationEvent.OutputTuple,
    ParticipationEvent.OutputObject
  >;
  getEvent(
    key: "StakeReturned"
  ): TypedContractEvent<
    StakeReturnedEvent.InputTuple,
    StakeReturnedEvent.OutputTuple,
    StakeReturnedEvent.OutputObject
  >;

  filters: {
    "ActionCreated(uint256,address,uint8,uint256,string)": TypedContractEvent<
      ActionCreatedEvent.InputTuple,
      ActionCreatedEvent.OutputTuple,
      ActionCreatedEvent.OutputObject
    >;
    ActionCreated: TypedContractEvent<
      ActionCreatedEvent.InputTuple,
      ActionCreatedEvent.OutputTuple,
      ActionCreatedEvent.OutputObject
    >;

    "ActionFinalized(uint256,address,uint256)": TypedContractEvent<
      ActionFinalizedEvent.InputTuple,
      ActionFinalizedEvent.OutputTuple,
      ActionFinalizedEvent.OutputObject
    >;
    ActionFinalized: TypedContractEvent<
      ActionFinalizedEvent.InputTuple,
      ActionFinalizedEvent.OutputTuple,
      ActionFinalizedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Participation(uint256,address,uint256,uint256)": TypedContractEvent<
      ParticipationEvent.InputTuple,
      ParticipationEvent.OutputTuple,
      ParticipationEvent.OutputObject
    >;
    Participation: TypedContractEvent<
      ParticipationEvent.InputTuple,
      ParticipationEvent.OutputTuple,
      ParticipationEvent.OutputObject
    >;

    "StakeReturned(uint256,address,uint256)": TypedContractEvent<
      StakeReturnedEvent.InputTuple,
      StakeReturnedEvent.OutputTuple,
      StakeReturnedEvent.OutputObject
    >;
    StakeReturned: TypedContractEvent<
      StakeReturnedEvent.InputTuple,
      StakeReturnedEvent.OutputTuple,
      StakeReturnedEvent.OutputObject
    >;
  };
}
